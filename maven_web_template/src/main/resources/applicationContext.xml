<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置注解方式 -->
    <context:component-scan base-package="com.web.core.controller, com.web.core.service, com.web.core.domain, com.web.core.dao"/>

    <!-- @mvc 主要作用于@Controller,激活该模式,下面是一种简写形式,完全可以手动配置替代这种简写形式,它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter,是spring MVC为@Controllers分发请求所必须的  -->
    <mvc:annotation-driven/>

    <!-- @mvc 配置js,css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->
    <mvc:resources location="/public/" mapping="/**" />

    <!-- @mvc jsp页面解析器,当Controller返回XXX字符串时，先通过拦截器,然后该类就会在/WEB-INF/views/目录下,查找XXX.jsp文件 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!--导入资源文件  -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--配置C3p0数据源  -->
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>

        <property name="initialPoolSize" value="${jdbc.initPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!--配置Hibernate 的SessionFactory 实例 通过Spring提供的LocalSessionFactoryBean 进行配置-->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!--配置数据源  -->
        <property name="dataSource" ref="dataSource"/>

        <!--配置hibernate配置文件的位置及名称  -->
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>

        <!-- 使用注解的时候,配置此项去选择扫描的包 -->
        <property name="packagesToScan">
            <list>
                <value>com.web.core.domain</value>
            </list>
        </property>

        <!--配置hibernate映射文件的位置及名称，可以使用通配符  -->
        <!--<property name="mappingLocations" value="classpath:com/web/core/domain/*.hbm.xml"/>-->
    </bean>

    <!--配置Spring 的声明式事务  -->
    <!-- 1.配置事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 2.配置事务属性  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3.配置事务切点，并把切点和事务属性关联起来  -->
    <aop:config>
        <aop:pointcut expression="execution(* com.web.core.service.*.*(..))"
                      id="txPointCut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

</beans>